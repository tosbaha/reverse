/*
 * Auto-generated by Frida. Please modify to match the signature of CCCrypt.
 * This stub is currently auto-generated from manpages when available.
 *
 * For full API reference, see: http://www.frida.re/docs/javascript-api/
 */
{
  /**
   * Called synchronously when about to call CCCrypt.
   *
   * @this {object} - Object allowing you to store state for use in onLeave.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {array} args - Function arguments represented as an array of NativePointer objects.
   * For example use args[0].readUtf8String() if the first argument is a pointer to a C string encoded as UTF-8.
   * It is also possible to modify arguments by assigning a NativePointer object to an element of this array.
   * @param {object} state - Object allowing you to keep state across function calls.
   * Only one JavaScript function will execute at a time, so do not worry about race-conditions.
   * However, do not use this to store function arguments across onEnter/onLeave, but instead
   * use "this" which is an object for keeping state local to an invocation.
   */
  onEnter: function (log, args, state) {
    this.operation   = args[0]
    this.CCAlgorithm = args[1]
    this.CCOptions   = args[2]
    this.keyBytes    = args[3]
    this.keyLength   = args[4]
    this.ivBuffer    = args[5]
    this.inBuffer    = args[6]
    this.inLength    = args[7]
    this.outBuffer   = args[8]
    this.outLength   = args[9]
    this.outCountPtr = args[10]

    console.log('CCCrypt(' + 
        'operation: '   + this.operation    +', ' +
        'CCAlgorithm: ' + this.CCAlgorithm  +', ' +
        'CCOptions: '   + this.CCOptions    +', ' +
        'keyBytes: '    + this.keyBytes     +', ' +
        'keyLength: '   + this.keyLength    +', ' +
        'ivBuffer: '    + this.ivBuffer     +', ' +
        'inBuffer: '    + this.inBuffer     +', ' +
        'inLength: '    + this.inLength     +', ' +
        'outBuffer: '   + this.outBuffer    +', ' +
        'outLength: '   + this.outLength    +', ' +
        'outCountPtr: ' + this.outCountPtr  +')')

        // Show the buffers here if this an encryption operation
        // console.log("In buffer:")
        // console.log(hexdump(ptr(this.inBuffer), {
        //     length: this.inLength.toInt32(),
        //     header: true,
        //     ansi: true
        // }))
        console.log("Key: ")
        console.log(hexdump(ptr(this.keyBytes), {
            length: this.keyLength.toInt32(),
            header: true,
            ansi: true
        }))
        // console.log("IV: ")
        // console.log(hexdump(ptr(this.ivBuffer), {
        //     length: this.keyLength.toInt32(),
        //     header: true,
        //     ansi: true
        // }))

  },

  /**
   * Called synchronously when about to return from CCCrypt.
   *
   * See onEnter for details.
   *
   * @this {object} - Object allowing you to access state stored in onEnter.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {NativePointer} retval - Return value represented as a NativePointer object.
   * @param {object} state - Object allowing you to keep state across function calls.
   */
  onLeave: function (log, retval, state) {
    console.log("Out buffer:")
    console.log(hexdump(ptr(this.outBuffer), {
        length: Memory.readUInt(this.outCountPtr),
        header: true,
        ansi: true
    }))
    console.log("Key: ")
    console.log(hexdump(ptr(this.keyBytes), {
        length: this.keyLength.toInt32(),
        header: true,
        ansi: true
    }))
    console.log("IV: ")
    console.log(hexdump(ptr(this.ivBuffer), {
        length: this.keyLength.toInt32(),
        header: true,
        ansi: true
    }))
  }
}
